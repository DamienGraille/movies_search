{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","console","log","this","props","movie","title","url","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","className","onChange","searchChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2BeA,6LAvBPC,QAAQC,IAAI,wBACZD,QAAQC,IAAIC,KAAKC,MAAMC,MAAMC,OAC7B,IAAMC,EAAM,mCAAqCJ,KAAKC,MAAMC,MAAMG,GAClEC,OAAOC,SAASC,KAAMJ,mCAGtB,OAAOK,EAAAC,EAAAC,cAAA,SAAOC,IAAKZ,KAAKC,MAAMC,MAAMG,IAClCI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,MAAM,MAAMC,IAAKf,KAAKC,MAAMC,MAAMc,cAEpDP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKX,KAAKC,MAAMC,MAAMC,OACtBM,EAAAC,EAAAC,cAAA,SAAIX,KAAKC,MAAMC,MAAMe,UACrBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASC,QAASnB,KAAKoB,UAAUC,KAAKrB,MAAOsB,MAAM,oBAjBxDC,IAAMC,4BC0FdC,cArFb,SAAAA,EAAYxB,GAAM,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,KAAMC,KACD+B,MAAQ,GAoBfN,EAAKO,cAAc,YAtBDP,6EAyBJQ,GAAW,IAAAC,EAAAnC,KACvBF,QAAQC,IAAI,gCACZ,IAAMqC,EAAY,sIAAuIF,EAC3JG,IAAEC,KAAK,CACLlC,IAAKgC,EACLG,QAAS,SAACC,GACR1C,QAAQC,IAAI,6BAEZ,IAAM0C,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAACzC,GACfA,EAAMc,WAAa,kDAAoDd,EAAM0C,YAE7E,IAAMC,EAAWpC,EAAAC,EAAAC,cAACmC,EAAD,CAAUlC,IAAKV,EAAMG,GAAIH,MAAOA,IACjDwC,EAAUK,KAAKF,KAEjBV,EAAKa,SAAS,CAACC,KAAMP,KAEvBQ,MAAO,SAACC,EAAKC,EAAQC,GACnBvD,QAAQC,IAAI,uEAKIuD,GAClBxD,QAAQC,IAAIuD,EAAMC,OAAOjC,OACzB,IAAMY,EAAaoB,EAAMC,OAAOjC,MAChCtB,KAAKiC,cAAcC,oCAInB,OACEzB,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,SAAO6C,UAAW,YAChB/C,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,cAErCN,EAAAC,EAAAC,cAAA,MAAIG,MAAM,MAEVL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCAKRF,EAAAC,EAAAC,cAAA,SAAO6C,UAAU,WACjBC,SAAUzD,KAAK0D,oBAAoBrC,KAAKrB,MACxC2D,YAAY,sBAEd3D,KAAKgC,MAAMiB,aAhFAzB,aCMEoC,QACW,cAA7BtD,OAAOC,SAASsD,UAEe,UAA7BvD,OAAOC,SAASsD,UAEhBvD,OAAOC,SAASsD,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d11da0a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass MovieRow extends React.Component {\r\n    viewMovie(){\r\n        console.log(\"Trying to view movie\")\r\n        console.log(this.props.movie.title)\r\n        const url = \"http://www.themoviedb.org/movie/\" + this.props.movie.id\r\n        window.location.href= url\r\n    }\r\n    render(){\r\n        return <table key={this.props.movie.id}>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n              <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n              </td>\r\n              <td>\r\n                <h3>{this.props.movie.title}</h3>\r\n                <p>{this.props.movie.overview}</p>\r\n                <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\r\n            </td>\r\n            </tr>\r\n          </tbody> \r\n        </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js';\nimport $ from 'jquery'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n   /* console.log(\"This is my initializer\")\n\n  const movies = [\n    {id:0, poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\", title:\"Avengers:Infinity War\", overview:\"As the Avengers and their allies have continued to protect the world from threats too large for any one hero to handle\"},\n    {id:1,poster_src:\"https://image.tmdb.org/t/p/w185_and_h278_bestv2/cezWGskPY5x7GaglTTRN4Fugfb8.jpg\",title:\"The Avengers\", overview:\"This is my second overview\"},\n  ]\n\n \n\n  var movieRows = []\n  movies.forEach((movie) => {\n    console.log(movie.title)\n    const movieRow = <MovieRow movie={movie}/>\n  movieRows.push(movieRow)\n  })\n\n\n\n  this.state = {rows: movieRows}*/\n  this.performSearch(\"avengers\")\n  }\n\n  performSearch(searchTerm){\n    console.log(\"Perform search using moviedb\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=930694ba1ece0a22257165acb5d7eb1b&language=en-US&page=1&include_adult=false&query=\"+ searchTerm\n  $.ajax({\n    url: urlString,\n    success: (searchResults) => {\n      console.log(\"Fetched data successfully\")\n      //console.log(searchResults)\n      const results = searchResults.results\n      //console.log(results[0])\n\n      var movieRows = []\n\n      results.forEach((movie)=>{\n        movie.poster_src = \"https://image.tmdb.org/t/p/w185_and_h278_bestv2\" + movie.poster_path\n        //console.log(movie.poster_path)\n        const movieRow = <MovieRow key={movie.id} movie={movie}/>\n        movieRows.push(movieRow)\n      })\n      this.setState({rows: movieRows})\n    },\n    error: (xhr, status, err) => {\n      console.log(\"Failed to fetch data\")\n    }\n  })\n  }\n\n  searchChangeHandler(event){\n    console.log(event.target.value)\n    const searchTerm = event.target.value\n    this.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n         <table className= \"titleBar\">\n           <tbody>\n             <tr>\n               <td>\n                 <img alt=\"app icon\" width=\"50\" src=\"icon.png\"/>\n               </td>\n               <td width=\"8\">\n               </td>\n               <td>\n                 <h1>MoviesDB Search</h1>\n               </td>\n             </tr>\n           </tbody>\n         </table>\n         <input className=\"inputBar\" \n         onChange={this.searchChangeHandler.bind(this)}\n         placeholder=\"Enter search term\"/>\n      \n      {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}